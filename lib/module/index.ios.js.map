{"version":3,"sources":["index.ios.tsx"],"names":["useState","useEffect","useCallback","Native","EventEmitter","HKQuantityTypeIdentifier","HKUnit","getPreferredUnit","type","unit","getPreferredUnits","ensureUnit","providedUnit","deserializeSample","sample","startDate","Date","endDate","deserializeWorkout","deserializCategorySample","serializeDate","date","toISOString","prepareOptions","options","limit","Infinity","ascending","from","to","queryQuantitySamples","identifier","opts","quantitySamples","map","subscribeToChanges","callback","subscription","addListener","typeIdentifier","queryId","subscribeToObserverQuery","catch","error","remove","Promise","reject","unsubscribeQuery","getMostRecentQuantitySample","samples","useMostRecentWorkout","workout","setWorkout","cancelSubscription","init","energyUnit","distanceUnit","getPreferredUnitsTyped","getMostRecentWorkout","then","getMostRecentCategorySample","queryCategorySamples","useMostRecentCategorySample","category","setCategory","updater","useSubscribeToChanges","onChange","useMostRecentQuantitySample","lastSample","setLastSample","actualUnit","value","saveQuantitySample","start","end","metadata","queryStatisticsForQuantity","toDate","mostRecentQuantityDateInterval","rawResponse","response","requestAuthorization","read","write","readPermissions","reduce","obj","cur","writePermissions","getDateOfBirth","dateOfBirth","getRequestStatusForAuthorization","results","units","distanceWalkingRunning","activeEnergyBurned","Kilocalories","Meters","queryWorkouts","workouts","queryWorkoutSamples","saveCategorySample","identifiers","i","buildUnitWithPrefix","prefix","deserializeCorrelation","s","objects","o","quantity","undefined","ensureMetadata","queryCorrelationSamples","correlations","saveCorrelationSample","saveWorkoutSample","quantities","_start","Healthkit","authorizationStatusFor","isHealthDataAvailable","disableAllBackgroundDelivery","disableBackgroundDelivery","enableBackgroundDelivery","getBiologicalSex","getFitzpatrickSkinType","getWheelchairUse","getBloodType"],"mappings":"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","sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport Native, {\n  EventEmitter,\n  HKCategorySampleRaw,\n  HKCategoryTypeIdentifier,\n  HKCategoryValueForIdentifier,\n  HKCharacteristicTypeIdentifier,\n  HKCorrelationRaw,\n  HKCorrelationTypeIdentifier,\n  HKQuantitySampleRaw,\n  HKQuantityTypeIdentifier,\n  HKSampleTypeIdentifier,\n  HKUnit,\n  HKUnitSI,\n  HKUnitSIPrefix,\n  HKWorkoutRaw,\n  MetadataMapperForCategoryIdentifier,\n} from './native-types';\nimport type {\n  GenericQueryOptions,\n  GetMostRecentCategorySampleFn,\n  GetMostRecentQuantitySampleFn,\n  GetMostRecentWorkoutFn,\n  GetPreferredUnitFn,\n  GetPreferredUnitsFn,\n  HKCategorySample,\n  HKCorrelation,\n  HKQuantitySample,\n  HKWorkout,\n  QueryCategorySamplesFn,\n  QueryCorrelationSamplesFn,\n  QueryQuantitySamplesFn,\n  QueryStatisticsForQuantityFn,\n  QueryWorkoutsFn,\n  ReactNativeHealthkit,\n  SaveCorrelationSampleFn,\n  SaveQuantitySampleFn,\n  SaveWorkoutSampleFn,\n  SubscribeToChangesFn,\n} from './types';\n\nconst getPreferredUnit: GetPreferredUnitFn = async (type) => {\n  const [unit] = await getPreferredUnits([type]);\n  return unit;\n};\n\nconst ensureUnit = async <TUnit extends HKUnit>(\n  type: HKQuantityTypeIdentifier,\n  providedUnit?: TUnit\n) => {\n  if (providedUnit) {\n    return providedUnit;\n  }\n  const unit = await Native.getPreferredUnits([type]);\n  return unit[type] as TUnit;\n};\n\nfunction deserializeSample<\n  TIdentifier extends HKQuantityTypeIdentifier,\n  TUnit extends HKUnit\n>(\n  sample: HKQuantitySampleRaw<TIdentifier, TUnit>\n): HKQuantitySample<TIdentifier, TUnit> {\n  return {\n    ...sample,\n    startDate: new Date(sample.startDate),\n    endDate: new Date(sample.endDate),\n  };\n}\n\nfunction deserializeWorkout<TEnergy extends HKUnit, TDistance extends HKUnit>(\n  sample: HKWorkoutRaw<TEnergy, TDistance>\n): HKWorkout<TEnergy, TDistance> {\n  return {\n    ...sample,\n    startDate: new Date(sample.startDate),\n    endDate: new Date(sample.endDate),\n  };\n}\n\nconst deserializCategorySample = <T extends HKCategoryTypeIdentifier>(\n  sample: HKCategorySampleRaw<T>\n): HKCategorySample<T> => {\n  return {\n    ...sample,\n    startDate: new Date(sample.startDate),\n    endDate: new Date(sample.endDate),\n  };\n};\n\nconst serializeDate = (date?: Date | null): string => {\n  return date ? date.toISOString() : new Date(0).toISOString();\n};\n\nconst prepareOptions = (options: GenericQueryOptions) => {\n  const limit =\n    !options.limit || options.limit === Infinity ? 0 : options.limit;\n  const ascending = options.ascending ?? limit === 0;\n  const from = serializeDate(options.from);\n  const to = serializeDate(options.to);\n  return { limit, ascending, from, to };\n};\n\nconst queryQuantitySamples: QueryQuantitySamplesFn = async (\n  identifier,\n  options\n) => {\n  const unit = await ensureUnit(identifier, options.unit);\n  const opts = prepareOptions(options);\n\n  const quantitySamples = await Native.queryQuantitySamples(\n    identifier,\n    unit,\n    opts.from,\n    opts.to,\n    opts.limit,\n    opts.ascending\n  );\n\n  return quantitySamples.map(deserializeSample);\n};\n\nconst subscribeToChanges: SubscribeToChangesFn = async (\n  identifier,\n  callback\n) => {\n  const subscription = EventEmitter.addListener(\n    'onChange',\n    ({ typeIdentifier }) => {\n      if (typeIdentifier === identifier) {\n        callback();\n      }\n    }\n  );\n\n  const queryId = await Native.subscribeToObserverQuery(identifier).catch(\n    (error) => {\n      subscription.remove();\n      return Promise.reject(error);\n    }\n  );\n\n  return () => {\n    subscription.remove();\n    return Native.unsubscribeQuery(queryId);\n  };\n};\n\nconst getMostRecentQuantitySample: GetMostRecentQuantitySampleFn = async (\n  identifier,\n  unit\n) => {\n  const samples = await queryQuantitySamples(identifier, {\n    limit: 1,\n    unit: unit,\n  });\n  return samples[0];\n};\n\nfunction useMostRecentWorkout<\n  TEnergy extends HKUnit,\n  TDistance extends HKUnit\n>(options?: { energyUnit?: TEnergy; distanceUnit?: TDistance }) {\n  const [workout, setWorkout] = useState<HKWorkout<TEnergy, TDistance> | null>(\n    null\n  );\n  useEffect(() => {\n    let cancelSubscription: (() => Promise<boolean>) | undefined;\n\n    const init = async () => {\n      const { energyUnit, distanceUnit } = await getPreferredUnitsTyped(\n        options\n      );\n\n      cancelSubscription = await subscribeToChanges(\n        'HKWorkoutTypeIdentifier',\n        () => {\n          getMostRecentWorkout({ energyUnit, distanceUnit }).then(setWorkout);\n        }\n      );\n    };\n    init();\n    return () => {\n      cancelSubscription && cancelSubscription();\n    };\n  }, [options]);\n  return workout;\n}\n\nconst getMostRecentCategorySample: GetMostRecentCategorySampleFn = async (\n  identifier\n) => {\n  const samples = await queryCategorySamples(identifier, {\n    limit: 1,\n    ascending: false,\n  });\n\n  return samples[0];\n};\n\nfunction useMostRecentCategorySample<\n  TCategory extends HKCategoryTypeIdentifier\n>(identifier: TCategory) {\n  const [category, setCategory] = useState<HKCategorySample<TCategory> | null>(\n    null\n  );\n  const updater = useCallback(() => {\n    getMostRecentCategorySample(identifier).then(setCategory);\n  }, [identifier]);\n\n  useSubscribeToChanges(identifier, updater);\n\n  return category;\n}\n\nfunction useSubscribeToChanges<TIdentifier extends HKSampleTypeIdentifier>(\n  identifier: TIdentifier,\n  onChange: () => void\n): void {\n  useEffect(() => {\n    let cancelSubscription: (() => Promise<boolean>) | undefined;\n\n    const init = async () => {\n      cancelSubscription = await subscribeToChanges(identifier, onChange);\n    };\n    init();\n\n    return () => {\n      cancelSubscription && cancelSubscription();\n    };\n  }, [identifier, onChange]);\n}\n\nfunction useMostRecentQuantitySample<\n  TIdentifier extends HKQuantityTypeIdentifier,\n  TUnit extends HKUnit = HKUnit\n>(identifier: TIdentifier, unit?: TUnit) {\n  const [lastSample, setLastSample] = useState<HKQuantitySample<\n    TIdentifier,\n    TUnit\n  > | null>(null);\n\n  useEffect(() => {\n    let cancelSubscription: (() => Promise<boolean>) | undefined;\n\n    const init = async () => {\n      const actualUnit = await ensureUnit(identifier, unit);\n\n      cancelSubscription = await subscribeToChanges(identifier, () => {\n        getMostRecentQuantitySample(identifier, actualUnit).then((value) => {\n          setLastSample(value);\n        });\n      });\n    };\n    init();\n\n    return () => {\n      cancelSubscription && cancelSubscription();\n    };\n  }, [identifier, unit]);\n\n  return lastSample;\n}\n\nconst saveQuantitySample: SaveQuantitySampleFn = (\n  identifier,\n  unit,\n  value,\n  options\n) => {\n  const start = options?.start || options?.end || new Date();\n  const end = options?.end || options?.start || new Date();\n  const metadata = options?.metadata || {};\n\n  return Native.saveQuantitySample(\n    identifier,\n    unit,\n    value,\n    start.toISOString(),\n    end.toISOString(),\n    metadata\n  );\n};\n\nconst queryStatisticsForQuantity: QueryStatisticsForQuantityFn = async (\n  identifier,\n  options,\n  from,\n  to,\n  unit\n) => {\n  const actualUnit = await ensureUnit(identifier, unit);\n  const toDate = to || new Date();\n  const {\n    mostRecentQuantityDateInterval,\n    ...rawResponse\n  } = await Native.queryStatisticsForQuantity(\n    identifier,\n    actualUnit,\n    from.toISOString(),\n    toDate.toISOString(),\n    options\n  );\n\n  const response = {\n    ...rawResponse,\n    ...(mostRecentQuantityDateInterval\n      ? {\n          mostRecentQuantityDateInterval: {\n            from: new Date(mostRecentQuantityDateInterval.from),\n            to: new Date(mostRecentQuantityDateInterval.to),\n          },\n        }\n      : {}),\n  };\n\n  return response;\n};\n\nconst requestAuthorization = (\n  read: (HKCharacteristicTypeIdentifier | HKSampleTypeIdentifier)[],\n  write: HKSampleTypeIdentifier[] = []\n): Promise<boolean> => {\n  const readPermissions = read.reduce((obj, cur) => {\n    return { ...obj, [cur]: true };\n  }, {});\n\n  const writePermissions = write.reduce((obj, cur) => {\n    return { ...obj, [cur]: true };\n  }, {});\n\n  return Native.requestAuthorization(writePermissions, readPermissions);\n};\n\nconst getDateOfBirth = async () => {\n  const dateOfBirth = await Native.getDateOfBirth();\n  return new Date(dateOfBirth);\n};\n\nconst getRequestStatusForAuthorization = (\n  read: (HKCharacteristicTypeIdentifier | HKSampleTypeIdentifier)[],\n  write: HKSampleTypeIdentifier[] = []\n) => {\n  const readPermissions = read.reduce((obj, cur) => {\n    return { ...obj, [cur]: true };\n  }, {});\n\n  const writePermissions = write.reduce((obj, cur) => {\n    return { ...obj, [cur]: true };\n  }, {});\n\n  return Native.getRequestStatusForAuthorization(\n    writePermissions,\n    readPermissions\n  );\n};\n\nconst queryCategorySamples: QueryCategorySamplesFn = async (\n  identifier,\n  options\n) => {\n  const opts = prepareOptions(options);\n  const results = await Native.queryCategorySamples(\n    identifier,\n    opts.from,\n    opts.to,\n    opts.limit,\n    opts.ascending\n  );\n\n  return results.map(deserializCategorySample);\n};\n\nasync function getPreferredUnitsTyped<\n  TEnergy extends HKUnit,\n  TDistance extends HKUnit\n>(options?: { energyUnit?: TEnergy; distanceUnit?: TDistance }) {\n  let energyUnit = options?.energyUnit;\n  let distanceUnit = options?.distanceUnit;\n  if (!energyUnit || !distanceUnit) {\n    const units = await Native.getPreferredUnits([\n      HKQuantityTypeIdentifier.distanceWalkingRunning,\n      HKQuantityTypeIdentifier.activeEnergyBurned,\n    ]);\n    if (!energyUnit) {\n      energyUnit = units[HKQuantityTypeIdentifier.distanceWalkingRunning] as\n        | TEnergy\n        | undefined;\n    }\n    if (!distanceUnit) {\n      distanceUnit = units[HKQuantityTypeIdentifier.activeEnergyBurned] as\n        | TDistance\n        | undefined;\n    }\n  }\n  if (!energyUnit) {\n    energyUnit = HKUnit.Kilocalories as TEnergy;\n  }\n  if (!distanceUnit) {\n    distanceUnit = HKUnit.Meters as TDistance;\n  }\n  return { energyUnit, distanceUnit };\n}\n\nconst queryWorkouts: QueryWorkoutsFn = async (options) => {\n  const { energyUnit, distanceUnit } = await getPreferredUnitsTyped(options);\n  const opts = prepareOptions(options);\n\n  const workouts = await Native.queryWorkoutSamples(\n    energyUnit,\n    distanceUnit,\n    opts.from,\n    opts.to,\n    opts.limit,\n    opts.ascending\n  );\n\n  return workouts.map(deserializeWorkout);\n};\n\nconst getMostRecentWorkout: GetMostRecentWorkoutFn = async (options) => {\n  const workouts = await queryWorkouts({\n    limit: 1,\n    ascending: false,\n    energyUnit: options?.energyUnit,\n    distanceUnit: options?.distanceUnit,\n  });\n\n  return workouts[0];\n};\n\nfunction saveCategorySample<T extends HKCategoryTypeIdentifier>(\n  identifier: T,\n  value: HKCategoryValueForIdentifier<T>,\n  options?: {\n    start?: Date;\n    end?: Date;\n    metadata?: MetadataMapperForCategoryIdentifier<T>;\n  }\n) {\n  const start = options?.start || options?.end || new Date();\n  const end = options?.end || options?.start || new Date();\n  const metadata = options?.metadata || {};\n\n  return Native.saveCategorySample(\n    identifier,\n    value,\n    start.toISOString(),\n    end.toISOString(),\n    metadata || {}\n  );\n}\n\nconst getPreferredUnits: GetPreferredUnitsFn = async (identifiers) => {\n  const units = await Native.getPreferredUnits(identifiers);\n  return identifiers.map((i) => units[i]);\n};\n\nconst buildUnitWithPrefix = (prefix: HKUnitSIPrefix, unit: HKUnitSI) => {\n  return `${prefix}${unit}` as HKUnit;\n};\n\nfunction deserializeCorrelation<\n  TIdentifier extends HKCorrelationTypeIdentifier\n>(s: HKCorrelationRaw<TIdentifier>): HKCorrelation<TIdentifier> {\n  return {\n    ...s,\n    objects: s.objects.map((o) => {\n      // @ts-ignore\n      if (o.quantity !== undefined) {\n        return deserializeSample(o as HKQuantitySampleRaw);\n      }\n\n      return deserializCategorySample(o as HKCategorySampleRaw);\n    }),\n    endDate: new Date(s.endDate),\n    startDate: new Date(s.startDate),\n  };\n}\n\nfunction ensureMetadata<TMetadata>(metadata?: TMetadata) {\n  return metadata || ({} as TMetadata);\n}\n\nconst queryCorrelationSamples: QueryCorrelationSamplesFn = async (\n  typeIdentifier,\n  options\n) => {\n  const opts = prepareOptions(options);\n  const correlations = await Native.queryCorrelationSamples(\n    typeIdentifier,\n    opts.from,\n    opts.to\n  );\n\n  return correlations.map(deserializeCorrelation);\n};\n\nconst saveCorrelationSample: SaveCorrelationSampleFn = async (\n  typeIdentifier,\n  samples,\n  options\n) => {\n  const start = (options?.start || new Date()).toISOString();\n  const end = (options?.end || new Date()).toISOString();\n\n  return Native.saveCorrelationSample(\n    typeIdentifier,\n    samples,\n    start,\n    end,\n    ensureMetadata(options?.metadata)\n  );\n};\n\nconst saveWorkoutSample: SaveWorkoutSampleFn = (\n  typeIdentifier,\n  quantities,\n  _start,\n  options\n) => {\n  const start = _start.toISOString();\n  const end = (options?.end || new Date()).toISOString();\n\n  return Native.saveWorkoutSample(\n    typeIdentifier,\n    quantities,\n    start,\n    end,\n    ensureMetadata(options?.metadata)\n  );\n};\n\nconst Healthkit: ReactNativeHealthkit = {\n  authorizationStatusFor: Native.authorizationStatusFor,\n\n  isHealthDataAvailable: Native.isHealthDataAvailable,\n\n  buildUnitWithPrefix,\n\n  disableAllBackgroundDelivery: Native.disableAllBackgroundDelivery,\n  disableBackgroundDelivery: Native.disableBackgroundDelivery,\n  enableBackgroundDelivery: Native.enableBackgroundDelivery,\n\n  // simple convenience getters\n  getBiologicalSex: Native.getBiologicalSex,\n  getFitzpatrickSkinType: Native.getFitzpatrickSkinType,\n  getWheelchairUse: Native.getWheelchairUse,\n  getBloodType: Native.getBloodType,\n  getDateOfBirth,\n\n  getMostRecentQuantitySample,\n  getMostRecentCategorySample,\n  getMostRecentWorkout,\n\n  getPreferredUnit,\n  getPreferredUnits,\n  getRequestStatusForAuthorization,\n\n  // query methods\n  queryCategorySamples,\n  queryCorrelationSamples,\n  queryQuantitySamples,\n  queryStatisticsForQuantity,\n  queryWorkouts,\n\n  requestAuthorization,\n\n  // save methods\n  saveCategorySample,\n  saveCorrelationSample,\n  saveQuantitySample,\n  saveWorkoutSample,\n\n  // subscriptions\n  subscribeToChanges,\n\n  // hooks\n  useMostRecentCategorySample,\n\n  useMostRecentQuantitySample,\n  useMostRecentWorkout,\n\n  useSubscribeToChanges,\n};\n\nexport * from './types';\nexport * from './native-types';\n\nexport default Healthkit;\n"]}