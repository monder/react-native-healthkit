{"version":3,"sources":["native-types.ts"],"names":["HKHeartRateMotionContext","HKCategoryTypeIdentifier","HKCategoryValueAppleStandHour","HKWorkoutActivityType","HKWeatherCondition","HKQuantityTypeIdentifier","HKAuthorizationRequestStatus","HKBloodType","HKBiologicalSex","HKFitzpatrickSkinType","HKStatisticsOptions","HKCategoryValueCervicalMucusQuality","HKCategoryValueMenstrualFlow","HKCategoryValueOvulationTestResult","HKCategoryValueSleepAnalysis","HKCategoryValueAppetiteChanges","HKCategoryValuePresence","HKCategoryValueSeverity","HKCategoryValueNotApplicable","HKInsulinDeliveryReason","HKWheelchairUse","HKUnitSIPrefix","HKUnitSI","HKUnit","HKCharacteristicTypeIdentifier","HKClinicalTypeIdentifier","HKDocumentTypeIdentifier","HKCorrelationTypeIdentifier","HKUpdateFrequency","Native","NativeModules","ReactNativeHealthkit","EventEmitter","NativeEventEmitter"],"mappings":";;;;;;;AAAA;;IAsBYA,wB;;;WAAAA,wB;AAAAA,EAAAA,wB,CAAAA,wB;AAAAA,EAAAA,wB,CAAAA,wB;AAAAA,EAAAA,wB,CAAAA,wB;GAAAA,wB,wCAAAA,wB;;IAMAC,wB;;;WAAAA,wB;AAAAA,EAAAA,wB;AAAAA,EAAAA,wB;AAAAA,EAAAA,wB;AAAAA,EAAAA,wB;AAAAA,EAAAA,wB;AAAAA,EAAAA,wB;AAAAA,EAAAA,wB;AAAAA,EAAAA,wB;AAAAA,EAAAA,wB;AAAAA,EAAAA,wB;AAAAA,EAAAA,wB;AAAAA,EAAAA,wB;AAAAA,EAAAA,wB;GAAAA,wB,wCAAAA,wB;;IAgBAC,6B;;;WAAAA,6B;AAAAA,EAAAA,6B,CAAAA,6B;AAAAA,EAAAA,6B,CAAAA,6B;GAAAA,6B,6CAAAA,6B;;IAKAC,qB;;;WAAAA,qB;AAAAA,EAAAA,qB,CAAAA,qB;AAAAA,EAAAA,qB,CAAAA,qB;AAAAA,EAAAA,qB,CAAAA,qB;AAAAA,EAAAA,qB,CAAAA,qB;AAAAA,EAAAA,qB,CAAAA,qB;AAAAA,EAAAA,qB,CAAAA,qB;AAAAA,EAAAA,qB,CAAAA,qB;AAAAA,EAAAA,qB,CAAAA,qB;AAAAA,EAAAA,qB,CAAAA,qB;AAAAA,EAAAA,qB,CAAAA,qB;AAAAA,EAAAA,qB,CAAAA,qB;AAAAA,EAAAA,qB,CAAAA,qB;AAAAA,EAAAA,qB,CAAAA,qB;AAAAA,EAAAA,qB,CAAAA,qB;AAAAA,EAAAA,qB,CAAAA,qB;AAAAA,EAAAA,qB,CAAAA,qB;AAAAA,EAAAA,qB,CAAAA,qB;AAAAA,EAAAA,qB,CAAAA,qB;AAAAA,EAAAA,qB,CAAAA,qB;AAAAA,EAAAA,qB,CAAAA,qB;AAAAA,EAAAA,qB,CAAAA,qB;AAAAA,EAAAA,qB,CAAAA,qB;AAAAA,EAAAA,qB,CAAAA,qB;AAAAA,EAAAA,qB,CAAAA,qB;AAAAA,EAAAA,qB,CAAAA,qB;AAAAA,EAAAA,qB,CAAAA,qB;AAAAA,EAAAA,qB,CAAAA,qB;AAAAA,EAAAA,qB,CAAAA,qB;AAAAA,EAAAA,qB,CAAAA,qB;AAAAA,EAAAA,qB,CAAAA,qB;AAAAA,EAAAA,qB,CAAAA,qB;AAAAA,EAAAA,qB,CAAAA,qB;AAAAA,EAAAA,qB,CAAAA,qB;AAAAA,EAAAA,qB,CAAAA,qB;AAAAA,EAAAA,qB,CAAAA,qB;AAAAA,EAAAA,qB,CAAAA,qB;AAAAA,EAAAA,qB,CAAAA,qB;AAAAA,EAAAA,qB,CAAAA,qB;AAAAA,EAAAA,qB,CAAAA,qB;AAAAA,EAAAA,qB,CAAAA,qB;AAAAA,EAAAA,qB,CAAAA,qB;AAAAA,EAAAA,qB,CAAAA,qB;AAAAA,EAAAA,qB,CAAAA,qB;AAAAA,EAAAA,qB,CAAAA,qB;AAAAA,EAAAA,qB,CAAAA,qB;AAAAA,EAAAA,qB,CAAAA,qB;AAAAA,EAAAA,qB,CAAAA,qB;AAAAA,EAAAA,qB,CAAAA,qB;AAAAA,EAAAA,qB,CAAAA,qB;AAAAA,EAAAA,qB,CAAAA,qB;AAAAA,EAAAA,qB,CAAAA,qB;AAAAA,EAAAA,qB,CAAAA,qB;AAAAA,EAAAA,qB,CAAAA,qB;AAAAA,EAAAA,qB,CAAAA,qB;AAAAA,EAAAA,qB,CAAAA,qB;AAAAA,EAAAA,qB,CAAAA,qB;AAAAA,EAAAA,qB,CAAAA,qB;AAAAA,EAAAA,qB,CAAAA,qB;AAAAA,EAAAA,qB,CAAAA,qB;AAAAA,EAAAA,qB,CAAAA,qB;AAAAA,EAAAA,qB,CAAAA,qB;AAAAA,EAAAA,qB,CAAAA,qB;AAAAA,EAAAA,qB,CAAAA,qB;AAAAA,EAAAA,qB,CAAAA,qB;AAAAA,EAAAA,qB,CAAAA,qB;AAAAA,EAAAA,qB,CAAAA,qB;AAAAA,EAAAA,qB,CAAAA,qB;AAAAA,EAAAA,qB,CAAAA,qB;AAAAA,EAAAA,qB,CAAAA,qB;AAAAA,EAAAA,qB,CAAAA,qB;AAAAA,EAAAA,qB,CAAAA,qB;AAAAA,EAAAA,qB,CAAAA,qB;AAAAA,EAAAA,qB,CAAAA,qB;AAAAA,EAAAA,qB,CAAAA,qB;AAAAA,EAAAA,qB,CAAAA,qB;AAAAA,EAAAA,qB,CAAAA,qB;AAAAA,EAAAA,qB,CAAAA,qB;GAAAA,qB,qCAAAA,qB;;AAiGZ;IACYC,kB;;;WAAAA,kB;AAAAA,EAAAA,kB,CAAAA,kB;AAAAA,EAAAA,kB,CAAAA,kB;AAAAA,EAAAA,kB,CAAAA,kB;AAAAA,EAAAA,kB,CAAAA,kB;AAAAA,EAAAA,kB,CAAAA,kB;AAAAA,EAAAA,kB,CAAAA,kB;AAAAA,EAAAA,kB,CAAAA,kB;AAAAA,EAAAA,kB,CAAAA,kB;AAAAA,EAAAA,kB,CAAAA,kB;AAAAA,EAAAA,kB,CAAAA,kB;AAAAA,EAAAA,kB,CAAAA,kB;AAAAA,EAAAA,kB,CAAAA,kB;AAAAA,EAAAA,kB,CAAAA,kB;AAAAA,EAAAA,kB,CAAAA,kB;AAAAA,EAAAA,kB,CAAAA,kB;AAAAA,EAAAA,kB,CAAAA,kB;AAAAA,EAAAA,kB,CAAAA,kB;AAAAA,EAAAA,kB,CAAAA,kB;AAAAA,EAAAA,kB,CAAAA,kB;AAAAA,EAAAA,kB,CAAAA,kB;AAAAA,EAAAA,kB,CAAAA,kB;AAAAA,EAAAA,kB,CAAAA,kB;AAAAA,EAAAA,kB,CAAAA,kB;AAAAA,EAAAA,kB,CAAAA,kB;AAAAA,EAAAA,kB,CAAAA,kB;AAAAA,EAAAA,kB,CAAAA,kB;AAAAA,EAAAA,kB,CAAAA,kB;AAAAA,EAAAA,kB,CAAAA,kB;GAAAA,kB,kCAAAA,kB;;AAsCZ;IACYC,wB;;;WAAAA,wB;AAAAA,EAAAA,wB;AAAAA,EAAAA,wB;AAAAA,EAAAA,wB;AAAAA,EAAAA,wB;AAAAA,EAAAA,wB;AAAAA,EAAAA,wB;AAAAA,EAAAA,wB;AAAAA,EAAAA,wB;AAAAA,EAAAA,wB;AAAAA,EAAAA,wB;AAAAA,EAAAA,wB;AAAAA,EAAAA,wB;AAAAA,EAAAA,wB;AAAAA,EAAAA,wB;AAAAA,EAAAA,wB;AAAAA,EAAAA,wB;AAAAA,EAAAA,wB;AAAAA,EAAAA,wB;AAAAA,EAAAA,wB;AAAAA,EAAAA,wB;AAAAA,EAAAA,wB;AAAAA,EAAAA,wB;AAAAA,EAAAA,wB;AAAAA,EAAAA,wB;AAAAA,EAAAA,wB;AAAAA,EAAAA,wB;AAAAA,EAAAA,wB;AAAAA,EAAAA,wB;AAAAA,EAAAA,wB;AAAAA,EAAAA,wB;AAAAA,EAAAA,wB;AAAAA,EAAAA,wB;AAAAA,EAAAA,wB;AAAAA,EAAAA,wB;AAAAA,EA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","sourcesContent":["import {\n  NativeModules,\n  NativeEventEmitter,\n  EmitterSubscription,\n} from 'react-native';\n\nexport type HKWorkoutTypeIdentifier = 'HKWorkoutTypeIdentifier';\nexport type HKAudiogramTypeIdentifier = 'HKAudiogramTypeIdentifier';\n\nexport type HKSampleTypeIdentifier =\n  | HKWorkoutTypeIdentifier\n  | HKQuantityTypeIdentifier\n  | HKCategoryTypeIdentifier\n  | HKClinicalTypeIdentifier\n  | HKDocumentTypeIdentifier\n  | HKAudiogramTypeIdentifier\n  | HKCorrelationTypeIdentifier;\n\nexport type TypeToUnitMapping = {\n  [key in HKQuantityTypeIdentifier]: HKUnit;\n};\n\nexport enum HKHeartRateMotionContext {\n  active = 2,\n  notSet = 0,\n  sedentary = 1,\n}\n\nexport enum HKCategoryTypeIdentifier {\n  sleepAnalysis = 'HKCategoryTypeIdentifierSleepAnalysis',\n  appleStandHour = 'HKCategoryTypeIdentifierAppleStandHour',\n  cervicalMucusQuality = 'HKCategoryTypeIdentifierCervicalMucusQuality',\n  ovulationTestResult = 'HKCategoryTypeIdentifierOvulationTestResult',\n  menstrualFlow = 'HKCategoryTypeIdentifierMenstrualFlow',\n  intermenstrualBleeding = 'HKCategoryTypeIdentifierIntermenstrualBleeding',\n  sexualActivity = 'HKCategoryTypeIdentifierSexualActivity',\n  mindfulSession = 'HKCategoryTypeIdentifierMindfulSession',\n  highHeartRateEvent = 'HKCategoryTypeIdentifierHighHeartRateEvent',\n  lowHeartRateEvent = 'HKCategoryTypeIdentifierLowHeartRateEvent',\n  irregularHeartRhythmEvent = 'HKCategoryTypeIdentifierIrregularHeartRhythmEvent',\n  audioExposureEvent = 'HKCategoryTypeIdentifierAudioExposureEvent',\n  toothbrushingEvent = 'HKCategoryTypeIdentifierToothbrushingEvent',\n}\n\nexport enum HKCategoryValueAppleStandHour {\n  stood = 0,\n  idle = 1,\n}\n\nexport enum HKWorkoutActivityType {\n  americanFootball = 1,\n  archery = 2,\n  australianFootball = 3,\n  badminton = 4,\n  baseball = 5,\n  basketball = 6,\n  bowling = 7,\n  boxing = 8, // See also HKWorkoutActivityTypeKickboxing.,\n  climbing = 9,\n  cricket = 10,\n  crossTraining = 11, // Any mix of cardio and/or strength training. See also HKWorkoutActivityTypeCoreTraining and HKWorkoutActivityTypeFlexibility.,\n  curling = 12,\n  cycling = 13,\n  dance = 14,\n  danceInspiredTraining = 15, // This enum remains available to access older data.,\n  elliptical = 16,\n  equestrianSports = 17, // Polo, Horse Racing, Horse Riding, etc.,\n  fencing = 18,\n  fishing = 19,\n  functionalStrengthTraining = 20, // Primarily free weights and/or body weight and/or accessories,\n  golf = 21,\n  gymnastics = 22,\n  handball = 23,\n  hiking = 24,\n  hockey = 25, // Ice Hockey, Field Hockey, etc.,\n  hunting = 26,\n  lacrosse = 27,\n  martialArts = 28,\n  mindAndBody = 29, // Qigong, meditation, etc.,\n  mixedMetabolicCardioTraining = 30, // This enum remains available to access older data.,\n  paddleSports = 31, // Canoeing, Kayaking, Outrigger, Stand Up Paddle Board, etc.,\n  play = 32, // Dodge Ball, Hopscotch, Tetherball, Jungle Gym, etc.,\n  preparationAndRecovery = 33, // Foam rolling, stretching, etc.,\n  racquetball = 34,\n  rowing = 35,\n  rugby = 36,\n  running = 37,\n  sailing = 38,\n  skatingSports = 39, // Ice Skating, Speed Skating, Inline Skating, Skateboarding, etc.,\n  snowSports = 40, // Sledding, Snowmobiling, Building a Snowman, etc. See also HKWorkoutActivityTypeCrossCountrySkiing, HKWorkoutActivityTypeSnowboarding, and HKWorkoutActivityTypeDownhillSkiing.,\n  soccer = 41,\n  softball = 42,\n  squash = 43,\n  stairClimbing = 44, // See also HKWorkoutActivityTypeStairs and HKWorkoutActivityTypeStepTraining.,\n  surfingSports = 45, // Traditional Surfing, Kite Surfing, Wind Surfing, etc.,\n  swimming = 46,\n  tableTennis = 47,\n  tennis = 48,\n  trackAndField = 49, // Shot Put, Javelin, Pole Vaulting, etc.,\n  traditionalStrengthTraining = 50, // Primarily machines and/or free weights,\n  volleyball = 51,\n  walking = 52,\n  waterFitness = 53,\n  waterPolo = 54,\n  waterSports = 55, // Water Skiing, Wake Boarding, etc.,\n  wrestling = 56,\n  yoga = 57,\n  barre = 58, // HKWorkoutActivityTypeDanceInspiredTraining,\n  coreTraining = 59,\n  crossCountrySkiing = 60,\n  downhillSkiing = 61,\n  flexibility = 62,\n  highIntensityIntervalTraining = 63,\n  jumpRope = 64,\n  kickboxing = 65,\n  pilates = 66, // HKWorkoutActivityTypeDanceInspiredTraining,\n  snowboarding = 67,\n  stairs = 68,\n  stepTraining = 69,\n  wheelchairWalkPace = 70,\n  wheelchairRunPace = 71,\n  taiChi = 72,\n  mixedCardio = 73, // HKWorkoutActivityTypeMixedMetabolicCardioTraining,\n  handCycling = 74,\n  discSports = 75,\n  fitnessGaming = 76,\n  other = 3000,\n}\n\nexport type HKGenericMetadata = {\n  HKExternalUUID?: string;\n  HKTimeZone?: string;\n  HKWasUserEntered?: boolean;\n  HKDeviceSerialNumber?: string;\n  HKUDIDeviceIdentifier?: string;\n  HKUDIProductionIdentifier?: string;\n  HKDigitalSignature?: string;\n  HKDeviceName?: string;\n  HKDeviceManufacturerName?: string;\n  HKSyncIdentifier?: string;\n  HKSyncVersion?: number;\n  HKWasTakenInLab?: boolean;\n  HKReferenceRangeLowerLimit?: number;\n  HKReferenceRangeUpperLimit?: number;\n};\n\n// documented at https://developer.apple.com/documentation/healthkit/hkweathercondition\nexport enum HKWeatherCondition {\n  none = 0,\n  clear = 1,\n  fair = 2,\n  partlyCloudy = 3,\n  mostlyCloudy = 4,\n  cloudy = 5,\n  foggy = 6,\n  haze = 7,\n  windy = 8,\n  blustery = 9,\n  smoky = 10,\n  dust = 11,\n  snow = 12,\n  hail = 13,\n  sleet = 14,\n  freezingDrizzle = 15,\n  freezingRain = 16,\n  mixedRainAndHail = 17,\n  mixedRainAndSnow = 18,\n  mixedRainAndSleet = 19,\n  mixedSnowAndSleet = 20,\n  drizzle = 21,\n  scatteredShowers = 22,\n  showers = 23,\n  thunderstorms = 24,\n  tropicalStorm = 25,\n  hurricane = 26,\n  tornado = 27,\n}\n\nexport interface HKWorkoutMetadata\n  extends HKGenericMetadata /*<TTemperatureUnit extends HKUnit>*/ {\n  HKWeatherCondition?: HKWeatherCondition;\n  HKWeatherHumidity?: HKQuantity<HKUnit.Percent>;\n  // HKWeatherTemperature: HKQuantity<TTemperatureUnit>\n}\n\n// Straight mapping to https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier\nexport enum HKQuantityTypeIdentifier {\n  bodyMassIndex = 'HKQuantityTypeIdentifierBodyMassIndex',\n  bodyFatPercentage = 'HKQuantityTypeIdentifierBodyFatPercentage', // Scalar(Percent, 0.0 - 1.0),  Discrete\n  height = 'HKQuantityTypeIdentifierHeight', // Length,                      Discrete\n  bodyMass = 'HKQuantityTypeIdentifierBodyMass', // Mass,                        Discrete\n  leanBodyMass = 'HKQuantityTypeIdentifierLeanBodyMass', // Mass,                        Discrete\n\n  waistCircumference = 'HKQuantityTypeIdentifierWaistCircumference', // Length,                      Discrete\n  // Fitness\n  stepCount = 'HKQuantityTypeIdentifierStepCount', // Scalar(Count),               Cumulative\n  distanceWalkingRunning = 'HKQuantityTypeIdentifierDistanceWalkingRunning', // Length,                      Cumulative\n  distanceCycling = 'HKQuantityTypeIdentifierDistanceCycling', // Length,                      Cumulative\n  distanceWheelchair = 'HKQuantityTypeIdentifierDistanceWheelchair', // Length,                      Cumulative\n  basalEnergyBurned = 'HKQuantityTypeIdentifierBasalEnergyBurned', // Energy,                      Cumulative\n  activeEnergyBurned = 'HKQuantityTypeIdentifierActiveEnergyBurned', // Energy,                      Cumulative\n  flightsClimbed = 'HKQuantityTypeIdentifierFlightsClimbed', // Scalar(Count),               Cumulative\n  nikeFuel = 'HKQuantityTypeIdentifierNikeFuel', // Scalar(Count),               Cumulative\n  appleExerciseTime = 'HKQuantityTypeIdentifierAppleExerciseTime', // Time                         Cumulative\n  pushCount = 'HKQuantityTypeIdentifierPushCount', // Scalar(Count),               Cumulative\n  distanceSwimming = 'HKQuantityTypeIdentifierDistanceSwimming', // Length,                      Cumulative\n  swimmingStrokeCount = 'HKQuantityTypeIdentifierSwimmingStrokeCount', // Scalar(Count),               Cumulative\n  vo2Max = 'HKQuantityTypeIdentifierVo2Max', // ml/(kg*min)                  Discrete\n  distanceDownhillSnowSports = 'HKQuantityTypeIdentifierDistanceDownhillSnowSports', // Length,                      Cumulative\n\n  appleStandTime = 'HKQuantityTypeIdentifierAppleStandTime', // Time,                        Cumulative\n  // Vitals\n  heartRate = 'HKQuantityTypeIdentifierHeartRate', // Scalar(Count)/Time,          Discrete\n  bodyTemperature = 'HKQuantityTypeIdentifierBodyTemperature', // Temperature,                 Discrete\n  basalBodyTemperature = 'HKQuantityTypeIdentifierBasalBodyTemperature', // Basal Body Temperature,      Discrete\n  bloodPressureSystolic = 'HKQuantityTypeIdentifierBloodPressureSystolic', // Pressure,                    Discrete\n  bloodPressureDiastolic = 'HKQuantityTypeIdentifierBloodPressureDiastolic', // Pressure,                    Discrete\n  respiratoryRate = 'HKQuantityTypeIdentifierRespiratoryRate', // Scalar(Count)/Time,          Discrete\n  // Beats per minute estimate of a user's lowest heart rate while at rest\n  restingHeartRate = 'HKQuantityTypeIdentifierRestingHeartRate', // Scalar(Count)/Time,          Discrete\n  // Average heartbeats per minute captured by an Apple Watch while a user is walking\n  walkingHeartRateAverage = 'HKQuantityTypeIdentifierWalkingHeartRateAverage', // Scalar(Count)/Time,          Discrete\n  // The standard deviation of heart beat-to-beat intevals (Standard Deviation of Normal to Normal)\n\n  heartRateVariabilitySDNN = 'HKQuantityTypeIdentifierHeartRateVariabilitySDNN', // Time (ms),                   Discrete\n  // Results\n  oxygenSaturation = 'HKQuantityTypeIdentifierOxygenSaturation', // Scalar (Percent, 0.0 - 1.0,  Discrete\n  peripheralPerfusionIndex = 'HKQuantityTypeIdentifierPeripheralPerfusionIndex', // Scalar(Percent, 0.0 - 1.0),  Discrete\n  bloodGlucose = 'HKQuantityTypeIdentifierBloodGlucose', // Mass/Volume,                 Discrete\n  numberOfTimesFallen = 'HKQuantityTypeIdentifierNumberOfTimesFallen', // Scalar(Count),               Cumulative\n  electrodermalActivity = 'HKQuantityTypeIdentifierElectrodermalActivity', // Conductance,                 Discrete\n  inhalerUsage = 'HKQuantityTypeIdentifierInhalerUsage', // Scalar(Count),               Cumulative\n  insulinDelivery = 'HKQuantityTypeIdentifierInsulinDelivery', // Pharmacology (IU)            Cumulative\n  bloodAlcoholContent = 'HKQuantityTypeIdentifierBloodAlcoholContent', // Scalar(Percent, 0.0 - 1.0),  Discrete\n  forcedVitalCapacity = 'HKQuantityTypeIdentifierForcedVitalCapacity', // Volume,                      Discrete\n  forcedExpiratoryVolume1 = 'HKQuantityTypeIdentifierForcedExpiratoryVolume1', // Volume,                      Discrete\n  peakExpiratoryFlowRate = 'HKQuantityTypeIdentifierPeakExpiratoryFlowRate', // Volume/Time,                 Discrete\n  environmentalAudioExposure = 'HKQuantityTypeIdentifierEnvironmentalAudioExposure', // Pressure,                    Cumulative\n\n  headphoneAudioExposure = 'HKQuantityTypeIdentifierHeadphoneAudioExposure', // Pressure,                    Cumulative\n  // Nutrition\n  dietaryFatTotal = 'HKQuantityTypeIdentifierDietaryFatTotal', // Mass,   Cumulative\n  dietaryFatPolyunsaturated = 'HKQuantityTypeIdentifierDietaryFatPolyunsaturated', // Mass,   Cumulative\n  dietaryFatMonounsaturated = 'HKQuantityTypeIdentifierDietaryFatMonounsaturated', // Mass,   Cumulative\n  dietaryFatSaturated = 'HKQuantityTypeIdentifierDietaryFatSaturated', // Mass,   Cumulative\n  dietaryCholesterol = 'HKQuantityTypeIdentifierDietaryCholesterol', // Mass,   Cumulative\n  dietarySodium = 'HKQuantityTypeIdentifierDietarySodium', // Mass,   Cumulative\n  dietaryCarbohydrates = 'HKQuantityTypeIdentifierDietaryCarbohydrates', // Mass,   Cumulative\n  dietaryFiber = 'HKQuantityTypeIdentifierDietaryFiber', // Mass,   Cumulative\n  dietarySugar = 'HKQuantityTypeIdentifierDietarySugar', // Mass,   Cumulative\n  dietaryEnergyConsumed = 'HKQuantityTypeIdentifierDietaryEnergyConsumed', // Energy, Cumulative\n  dietaryProtein = 'HKQuantityTypeIdentifierDietaryProtein', // Mass,   Cumulative\n\n  dietaryVitaminA = 'HKQuantityTypeIdentifierDietaryVitaminA', // Mass, Cumulative\n  dietaryVitaminB6 = 'HKQuantityTypeIdentifierDietaryVitaminB6', // Mass, Cumulative\n  dietaryVitaminB12 = 'HKQuantityTypeIdentifierDietaryVitaminB12', // Mass, Cumulative\n  dietaryVitaminC = 'HKQuantityTypeIdentifierDietaryVitaminC', // Mass, Cumulative\n  dietaryVitaminD = 'HKQuantityTypeIdentifierDietaryVitaminD', // Mass, Cumulative\n  dietaryVitaminE = 'HKQuantityTypeIdentifierDietaryVitaminE', // Mass, Cumulative\n  dietaryVitaminK = 'HKQuantityTypeIdentifierDietaryVitaminK', // Mass, Cumulative\n  dietaryCalcium = 'HKQuantityTypeIdentifierDietaryCalcium', // Mass, Cumulative\n  dietaryIron = 'HKQuantityTypeIdentifierDietaryIron', // Mass, Cumulative\n  dietaryThiamin = 'HKQuantityTypeIdentifierDietaryThiamin', // Mass, Cumulative\n  dietaryRiboflavin = 'HKQuantityTypeIdentifierDietaryRiboflavin', // Mass, Cumulative\n  dietaryNiacin = 'HKQuantityTypeIdentifierDietaryNiacin', // Mass, Cumulative\n  dietaryFolate = 'HKQuantityTypeIdentifierDietaryFolate', // Mass, Cumulative\n  dietaryBiotin = 'HKQuantityTypeIdentifierDietaryBiotin', // Mass, Cumulative\n  dietaryPantothenicAcid = 'HKQuantityTypeIdentifierDietaryPantothenicAcid', // Mass, Cumulative\n  dietaryPhosphorus = 'HKQuantityTypeIdentifierDietaryPhosphorus', // Mass, Cumulative\n  dietaryIodine = 'HKQuantityTypeIdentifierDietaryIodine', // Mass, Cumulative\n  dietaryMagnesium = 'HKQuantityTypeIdentifierDietaryMagnesium', // Mass, Cumulative\n  dietaryZinc = 'HKQuantityTypeIdentifierDietaryZinc', // Mass, Cumulative\n  dietarySelenium = 'HKQuantityTypeIdentifierDietarySelenium', // Mass, Cumulative\n  dietaryCopper = 'HKQuantityTypeIdentifierDietaryCopper', // Mass, Cumulative\n  dietaryManganese = 'HKQuantityTypeIdentifierDietaryManganese', // Mass, Cumulative\n  dietaryChromium = 'HKQuantityTypeIdentifierDietaryChromium', // Mass, Cumulative\n  dietaryMolybdenum = 'HKQuantityTypeIdentifierDietaryMolybdenum', // Mass, Cumulative\n  dietaryChloride = 'HKQuantityTypeIdentifierDietaryChloride', // Mass, Cumulative\n  dietaryPotassium = 'HKQuantityTypeIdentifierDietaryPotassium', // Mass, Cumulative\n  dietaryCaffeine = 'HKQuantityTypeIdentifierDietaryCaffeine', // Mass, Cumulative\n  dietaryWater = 'HKQuantityTypeIdentifierDietaryWater', // Volume, Cumulative\n\n  uvExposure = 'HKQuantityTypeIdentifierUvExposure', // Scalar (Count), Discrete\n}\n\nexport enum HKAuthorizationRequestStatus {\n  unknown = 0,\n  shouldRequest = 1,\n  unnecessary = 2,\n}\n\nexport type HKQuantity<T extends HKUnit = HKUnit> = {\n  unit: T;\n  quantity: number;\n};\n\nexport enum HKBloodType {\n  notSet = 0,\n  aPositive = 1,\n  aNegative = 2,\n  bPositive = 3,\n  bNegative = 4,\n  abPositive = 5,\n  abNegative = 6,\n  oPositive = 7,\n  oNegative = 8,\n}\n\nexport enum HKBiologicalSex {\n  notSet = 0,\n  female = 1,\n  male = 2,\n  other = 3,\n}\n\nexport enum HKFitzpatrickSkinType {\n  notSet = 0,\n  I = 1,\n  II = 2,\n  III = 3,\n  IV = 4,\n  V = 5,\n  VI = 6,\n}\n\nexport enum HKStatisticsOptions {\n  cumulativeSum = 'cumulativeSum',\n  discreteAverage = 'discreteAverage',\n  discreteMax = 'discreteMax',\n  discreteMin = 'discreteMin',\n  discreteMostRecent = 'discreteMostRecent',\n  duration = 'duration',\n  mostRecent = 'mostRecent',\n  separateBySource = 'separateBySource',\n}\n\nexport type QueryStatisticsResponseRaw<TUnit extends HKUnit = HKUnit> = {\n  averageQuantity?: HKQuantity<TUnit>;\n  maximumQuantity?: HKQuantity<TUnit>;\n  minimumQuantity?: HKQuantity<TUnit>;\n  sumQuantity?: HKQuantity<TUnit>;\n  mostRecentQuantity?: HKQuantity<TUnit>;\n  mostRecentQuantityDateInterval?: { from: string; to: string };\n  duration?: HKQuantity<HKUnit.Seconds>;\n};\n\nexport enum HKCategoryValueCervicalMucusQuality {\n  dry = 1,\n  sticky = 2,\n  creamy = 3,\n  watery = 4,\n  eggWhite = 5,\n}\n\nexport enum HKCategoryValueMenstrualFlow {\n  unspecified = 1,\n  none = 5,\n  light = 2,\n  medium = 3,\n  heavy = 4,\n}\n\nexport enum HKCategoryValueOvulationTestResult {\n  negative = 1,\n  luteinizingHormoneSurge = 2,\n  indeterminate = 3,\n  estrogenSurge = 4,\n}\n\nexport enum HKCategoryValueSleepAnalysis {\n  inBed = 0,\n  asleep = 1,\n  awake = 2,\n}\n\nexport enum HKCategoryValueAppetiteChanges {\n  decreased = 2,\n  increased = 3,\n  noChange = 1,\n  unspecified = 0,\n}\n\nexport enum HKCategoryValuePresence {\n  notPresent = 1,\n  present = 0,\n}\n\nexport enum HKCategoryValueSeverity {\n  notPresent = 1,\n  mild = 2,\n  moderate = 3,\n  severe = 4,\n  unspecified = 0,\n}\n\nexport enum HKCategoryValueNotApplicable {\n  notApplicable = 0,\n}\n\nexport type HKCategoryValue =\n  | HKCategoryValueAppetiteChanges\n  | HKCategoryValuePresence\n  | HKCategoryValueSeverity\n  | HKCategoryValuePresence\n  | HKCategoryValueMenstrualFlow\n  | HKCategoryValueSleepAnalysis\n  | HKCategoryValueCervicalMucusQuality\n  | HKCategoryValueOvulationTestResult\n  | number;\n\nexport enum HKInsulinDeliveryReason {\n  basal = 1,\n  bolus = 2,\n}\n\nexport type MetadataMapperForQuantityIdentifier<\n  TQuantityTypeIdentifier = HKQuantityTypeIdentifier\n> = TQuantityTypeIdentifier extends HKQuantityTypeIdentifier.insulinDelivery\n  ? HKGenericMetadata & {\n      HKInsulinDeliveryReason: HKInsulinDeliveryReason;\n    }\n  : TQuantityTypeIdentifier extends HKQuantityTypeIdentifier.bloodGlucose\n  ? HKGenericMetadata & {\n      HKBloodGlucoseMealTime?: number;\n    }\n  : TQuantityTypeIdentifier extends HKQuantityTypeIdentifier.heartRate\n  ? HKGenericMetadata & {\n      HKHeartRateMotionContext?: HKHeartRateMotionContext;\n    }\n  : HKGenericMetadata;\n\nexport type MetadataMapperForCorrelationIdentifier<\n  TCorrelationTypeIdentifier = HKCorrelationTypeIdentifier\n> = TCorrelationTypeIdentifier extends HKCorrelationTypeIdentifier.food\n  ? HKGenericMetadata & {\n      HKFoodType?: string;\n    }\n  : HKGenericMetadata;\n\nexport type HKCategoryValueForIdentifier<\n  T extends HKCategoryTypeIdentifier\n> = T extends HKCategoryTypeIdentifier.cervicalMucusQuality\n  ? HKCategoryValueCervicalMucusQuality\n  : T extends HKCategoryTypeIdentifier.menstrualFlow\n  ? HKCategoryValueMenstrualFlow\n  : T extends HKCategoryTypeIdentifier.ovulationTestResult\n  ? HKCategoryValueOvulationTestResult\n  : T extends HKCategoryTypeIdentifier.sleepAnalysis\n  ? HKCategoryValueSleepAnalysis\n  : T extends HKCategoryTypeIdentifier.mindfulSession\n  ? HKCategoryValueNotApplicable\n  : T extends HKCategoryTypeIdentifier.intermenstrualBleeding\n  ? HKCategoryValueNotApplicable\n  : T extends HKCategoryTypeIdentifier.highHeartRateEvent\n  ? HKCategoryValueNotApplicable\n  : T extends HKCategoryTypeIdentifier.sexualActivity\n  ? HKCategoryValueNotApplicable\n  : T extends HKCategoryTypeIdentifier.appleStandHour\n  ? HKCategoryValueAppleStandHour\n  : number;\n\nexport type MetadataMapperForCategoryIdentifier<\n  T extends HKCategoryTypeIdentifier\n> = T extends HKCategoryTypeIdentifier.sexualActivity\n  ? HKGenericMetadata & {\n      HKSexualActivityProtectionUsed: boolean;\n    }\n  : T extends HKCategoryTypeIdentifier.menstrualFlow\n  ? HKGenericMetadata & {\n      HKMenstrualCycleStart: boolean;\n    }\n  : HKGenericMetadata;\n\n// Maps directly to https://developer.apple.com/documentation/healthkit/hkwheelchairuse\nexport enum HKWheelchairUse {\n  notSet = 0,\n  no = 1,\n  yes = 2,\n}\n\n// Unit types are a straight mapping from here https://developer.apple.com/documentation/healthkit/hkunit/1615733-init\nexport enum HKUnitSIPrefix {\n  Pico = 'p',\n  Nano = 'n',\n  Micro = 'mc',\n  Milli = 'm',\n  Centi = 'c',\n  Deci = 'd',\n  Deca = 'da',\n  Hecto = 'h',\n  Kilo = 'k',\n  Mega = 'M',\n  Giga = 'G',\n  Tera = 'T',\n}\n\nexport enum HKUnitSI {\n  Grams = 'g',\n  Joules = 'J',\n  Kelvin = 'K',\n  Liters = 'l',\n  Meters = 'm',\n  Pascals = 'Pa',\n  Seconds = 's',\n  Siemens = 'S',\n}\n\nexport enum HKUnit {\n  Grams = 'g',\n  Joules = 'J',\n  Kelvin = 'K',\n  Liters = 'l',\n  Meters = 'm',\n  Pascals = 'Pa',\n  Seconds = 's',\n  Siemens = 'S',\n\n  Atmospheres = 'atm',\n  CentimetersOfWater = 'cmAq',\n  Count = 'count',\n  Days = 'd',\n  DecibelHearingLevel = 'dBHL',\n  DecibelSoundPressureLevel = 'dBASPL',\n  DegreesCelsius = 'degC',\n  DegreesFahrenheit = 'degF',\n  Feet = 'ft',\n  Hertz = 'Hz',\n  Hours = 'hr',\n  ImperialCup = 'cup_imp',\n  ImperialFluidOunces = 'fl_oz_imp',\n  ImperialPint = 'pt_imp',\n  Inches = 'in',\n  InternationalUnit = 'IU',\n  Kilocalories = 'kcal',\n  LargeCalories = 'Cal',\n  Miles = 'mi',\n  MillimetersOfMercury = 'mmHg',\n  Minutes = 'min',\n  Ounces = 'oz',\n  Percent = '%',\n  Pounds = 'lb',\n  SmallCalories = 'cal',\n  Stones = 'st',\n  USCup = 'cup_us',\n  USFluidOunces = 'fl_oz_us',\n  USPint = 'pt_us',\n  Yard = 'yd',\n\n  GlucoseMmolPerL = 'mmol<180.15588000005408>/l',\n  GlucoseMgPerDl = 'mg/dL',\n}\n\nexport type HKDevice = {\n  name: string;\n  firmwareVersion: string;\n  hardwareVersion: string;\n  localIdentifier: string;\n  manufacturer: string;\n  model: string;\n  softwareVersion: string;\n};\n\nexport type HKQuantitySampleRaw<\n  TQuantityIdentifier extends HKQuantityTypeIdentifier = HKQuantityTypeIdentifier,\n  TUnit extends HKUnit = HKUnit\n> = {\n  uuid: string;\n  device?: HKDevice;\n  quantityType: TQuantityIdentifier;\n  startDate: string;\n  endDate: string;\n  quantity: number;\n  unit: TUnit;\n  metadata: MetadataMapperForQuantityIdentifier<TQuantityIdentifier>;\n};\n\nexport type HKWorkoutRaw<TEnergy extends HKUnit, TDistance extends HKUnit> = {\n  workoutActivityType: HKWorkoutActivityType;\n  duration: number;\n  totalDistance?: HKQuantity<TDistance>;\n  totalEnergyBurned?: HKQuantity<TEnergy>;\n  totalSwimmingStrokeCount?: HKQuantity<HKUnit.Count>;\n  totalFlightsClimbed?: HKQuantity<HKUnit.Count>;\n  startDate: string;\n  endDate: string;\n  metadata?: HKWorkoutMetadata;\n};\n\n// Straight mapping to https://developer.apple.com/documentation/healthkit/hkcharacteristictypeidentifier\nexport enum HKCharacteristicTypeIdentifier {\n  fitzpatrickSkinType = 'HKCharacteristicTypeIdentifierFitzpatrickSkinType',\n  biologicalSex = 'HKCharacteristicTypeIdentifierBiologicalSex',\n  bloodType = 'HKCharacteristicTypeIdentifierBloodType',\n  dateOfBirth = 'HKCharacteristicTypeIdentifierDateOfBirth',\n  wheelchairUse = 'HKCharacteristicTypeIdentifierWheelchairUse',\n}\n\nexport type WritePermssions = {\n  [key in\n    | HKCharacteristicTypeIdentifier\n    | HKQuantityTypeIdentifier\n    | HKCategoryTypeIdentifier]: boolean;\n};\n\nexport type ReadPermssions = {\n  [key in\n    | HKQuantityTypeIdentifier\n    | HKCharacteristicTypeIdentifier\n    | HKCategoryTypeIdentifier]: boolean;\n};\n\nexport type HKCategorySampleRaw<\n  T extends HKCategoryTypeIdentifier = HKCategoryTypeIdentifier\n> = {\n  uuid: string;\n  device?: HKDevice;\n  categoryType: T;\n  startDate: string;\n  endDate: string;\n  value: HKCategoryValueForIdentifier<T>;\n  metadata: MetadataMapperForCategoryIdentifier<T>;\n};\n\nexport enum HKClinicalTypeIdentifier {\n  allergyRecord = 'HKClinicalTypeIdentifierAllergyRecord',\n  conditionRecord = 'HKClinicalTypeIdentifierConditionRecord',\n  immunizationRecord = 'HKClinicalTypeIdentifierImmunizationRecord',\n  labResultRecord = 'HKClinicalTypeIdentifierLabResultRecord',\n  medicationRecord = 'HKClinicalTypeIdentifierMedicationRecord',\n  procedureRecord = 'HKClinicalTypeIdentifierProcedureRecord',\n  vitalSignRecord = 'HKClinicalTypeIdentifierVitalSignRecord',\n}\n\nexport type HKClinicalSampleRaw = {\n  clinicalType: HKClinicalTypeIdentifier;\n  uuid: string;\n  device?: HKDevice;\n  endDate: string;\n  startDate: string;\n  displayName: string;\n  fhirResource?: Object;\n};\n\nexport enum HKDocumentTypeIdentifier {\n  CDA = 'HKDocumentTypeIdentifierCDA',\n}\n\nexport type HKDocumentSampleRaw = {\n  uuid: string;\n  device?: HKDevice;\n  documentType: HKDocumentTypeIdentifier;\n  documentData?: string; // base64\n  title: string;\n  patientName: string;\n  custodianName: string;\n  authorName: string;\n  startDate: string;\n  endDate: string;\n};\n\nexport type HKCorrelationRaw<\n  TIdentifier extends HKCorrelationTypeIdentifier\n> = {\n  correlationType: HKCorrelationTypeIdentifier;\n  objects: (HKQuantitySampleRaw | HKCategorySampleRaw)[];\n  metadata: MetadataMapperForCorrelationIdentifier<TIdentifier>;\n  startDate: string;\n  endDate: string;\n};\n\ntype QueryId = string;\n\nexport enum HKCorrelationTypeIdentifier {\n  bloodPressure = 'HKCorrelationTypeIdentifierBloodPressure',\n  food = 'HKCorrelationTypeIdentifierFood',\n}\n\nexport enum HKUpdateFrequency {\n  immediate = 1,\n  hourly = 2,\n  daily = 3,\n  weekly = 4,\n}\n\ntype ReactNativeHealthkitTypeNative = {\n  isHealthDataAvailable(): Promise<boolean>;\n  getBloodType(): Promise<HKBloodType>;\n  getDateOfBirth(): Promise<string>;\n  getBiologicalSex(): Promise<HKBiologicalSex>;\n  getFitzpatrickSkinType(): Promise<HKFitzpatrickSkinType>;\n  getWheelchairUse: () => Promise<HKWheelchairUse>;\n\n  enableBackgroundDelivery: (\n    typeIdentifier: HKSampleTypeIdentifier,\n    updateFrequency: HKUpdateFrequency\n  ) => Promise<boolean>;\n  disableBackgroundDelivery: (\n    typeIdentifier: HKSampleTypeIdentifier\n  ) => Promise<boolean>;\n  disableAllBackgroundDelivery: () => Promise<boolean>;\n\n  saveCorrelationSample: <TIdentifier extends HKCorrelationTypeIdentifier>(\n    typeIdentifier: TIdentifier,\n    samples: Omit<\n      HKQuantitySampleRaw | HKCategorySampleRaw,\n      'startDate' | 'endDate' | 'uuid' | 'device'\n    >[],\n    start: string,\n    end: string,\n    metadata: MetadataMapperForCorrelationIdentifier<TIdentifier>\n  ) => Promise<boolean>;\n\n  saveWorkoutSample: (\n    typeIdentifier: HKWorkoutActivityType,\n    quantities: Omit<\n      HKQuantitySampleRaw,\n      'startDate' | 'endDate' | 'uuid' | 'device'\n    >[],\n    start: string,\n    end: string,\n    metadata: HKWorkoutMetadata\n  ) => Promise<boolean>;\n\n  queryClinicalSamples: (\n    typeIdentifier: HKClinicalTypeIdentifier,\n    from: string,\n    to: string,\n    limit: Number,\n    ascending: boolean\n  ) => Promise<HKClinicalSampleRaw[]>;\n\n  queryDocumentSamples: (\n    typeIdentifier: HKDocumentTypeIdentifier,\n    from: string,\n    to: string,\n    limit: Number,\n    ascending: boolean\n  ) => Promise<HKDocumentSampleRaw[]>;\n\n  queryCorrelationSamples: <TIdentifier extends HKCorrelationTypeIdentifier>(\n    typeIdentifier: TIdentifier,\n    from: string,\n    to: string\n  ) => Promise<HKCorrelationRaw<TIdentifier>[]>;\n\n  subscribeToObserverQuery(\n    identifier: HKSampleTypeIdentifier\n  ): Promise<QueryId>;\n  unsubscribeQuery(queryId: QueryId): Promise<boolean>;\n  authorizationStatusFor(\n    type: HKSampleTypeIdentifier | HKCharacteristicTypeIdentifier\n  ): Promise<boolean>;\n  getRequestStatusForAuthorization(\n    write: WritePermssions | {},\n    read: ReadPermssions | {}\n  ): Promise<HKAuthorizationRequestStatus>;\n  requestAuthorization(\n    write: WritePermssions | {},\n    read: ReadPermssions | {}\n  ): Promise<boolean>;\n  saveQuantitySample: (\n    identifier: HKQuantityTypeIdentifier,\n    unit: HKUnit,\n    value: number,\n    start: string,\n    end: string,\n    metadata: Object\n  ) => Promise<boolean>;\n  queryWorkoutSamples: <TEnergy extends HKUnit, TDistance extends HKUnit>(\n    energyUnit: TEnergy,\n    distanceUnit: TDistance,\n    from: string,\n    to: string,\n    limit: Number,\n    ascending: boolean\n  ) => Promise<HKWorkoutRaw<TEnergy, TDistance>[]>;\n  queryCategorySamples: <T extends HKCategoryTypeIdentifier>(\n    identifier: T,\n    from: string,\n    to: string,\n    limit: Number,\n    ascending: boolean\n  ) => Promise<HKCategorySampleRaw<T>[]>;\n  queryQuantitySamples: <\n    TUnit extends HKUnit,\n    TIdentifier extends HKQuantityTypeIdentifier\n  >(\n    identifier: TIdentifier,\n    unit: TUnit,\n    from: string,\n    to: string,\n    limit: Number,\n    ascending: boolean\n  ) => Promise<HKQuantitySampleRaw<TIdentifier, TUnit>[]>;\n  saveCategorySample: <T extends HKCategoryTypeIdentifier>(\n    identifier: T,\n    value: HKCategoryValueForIdentifier<T>,\n    start: string,\n    end: string,\n    metadata: Object\n  ) => Promise<boolean>;\n  queryStatisticsForQuantity: <TUnit extends HKUnit>(\n    identifier: HKQuantityTypeIdentifier,\n    unit: TUnit,\n    from: string,\n    to: string,\n    options: HKStatisticsOptions[]\n  ) => Promise<QueryStatisticsResponseRaw<TUnit>>;\n  getPreferredUnits: (\n    identifiers: HKQuantityTypeIdentifier[]\n  ) => Promise<TypeToUnitMapping>;\n};\n\nconst Native = NativeModules.ReactNativeHealthkit as ReactNativeHealthkitTypeNative;\n\ntype OnChangeCallback = ({\n  typeIdentifier,\n}: {\n  typeIdentifier: HKSampleTypeIdentifier;\n}) => void;\n\ninterface HealthkitEventEmitter extends NativeEventEmitter {\n  addListener: (\n    eventType: 'onChange',\n    callback: OnChangeCallback\n  ) => EmitterSubscription;\n}\n\nexport const EventEmitter = new NativeEventEmitter(\n  NativeModules.ReactNativeHealthkit\n) as HealthkitEventEmitter;\n\nexport default Native;\n"]}